name: CI/CD - Build - Push - Deploy
on:
  push:
    branches:
        - main
    paths:
        - "Received/**" #so dispara se for alterado codigo
        - "Send/**"
  workflow_dispatch:
jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"[repositoty_sonar]" /o:"[--usuario--]" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
           dotnet publish -c Release -o out
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          
  docker-build-push:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
   
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image received
        uses: docker/build-push-action@v5
        with:
          context: .
          # platforms: windows/amd64
          file: ./Received/dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_REPOSITORY }}/${{ secrets.DOCKERHUB_TAG_RECEIVED}}
          
      - name: Build and push Docker image send
        uses: docker/build-push-action@v5
        with:
          context: .
          # platforms: windows/amd64
          file: ./Send/dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_REPOSITORY }}/${{ secrets.DOCKERHUB_TAG_SEND}}

  terraform-deploy:      
    needs: docker-build-push
    name:  Deploy AWS EKS
    runs-on: ubuntu-latest
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}                
      - name: Deploy Apps AWS
        working-directory: ./src_app
        run: |
          aws eks update-kubeconfig --name ada-aws-eks --region us-east-1
          kubectl apply -f .
          kubectl get node
          kubectl get pods -A